import firebase_admin
from firebase_admin import *
from firebase_admin import firestore
from datetime import datetime
import datetime
import google.cloud

count=0
for i1 in [12,2314,24,324]:
    for i2 in [213,134,534]:
        count+=1
print(count)

def MiBToBytes_Conversion(mib):
    One_mib_in_bytes=1049000.0
    converted_bytes=mib*One_mib_in_bytes
    return converted_bytes

def BytesToMiB_Conversion(mib_bytes):
    One_mib_in_bytes=1049000.0
    converted_mib=mib_bytes/One_mib_in_bytes
    return converted_mib

def utf8len(s):
    return 1+len(s.encode('utf-8'))#returns 1+utf-8 in accordance to https://firebase.google.com/docs/firestore/storage-size

users=utf8len('users')
speech_inventory=utf8len('speech_inventory')
speechInventoryPrice=utf8len('speechInventoryPrice')
records=utf8len('records')

totalConstantPathSize=users+speech_inventory+speechInventoryPrice+records

additionalBytes=16
cred1=credentials.Certificate("project1-4e7b7-firebase-adminsdk-7irgt-433da006ab.json")

def extractDatabase(cred):
    app=firebase_admin.initialize_app(cred)
    db=firestore.client()
    delete_app(app)
    return db
db1=extractDatabase(cred1)

def ExtractRandomDocIdFromCollectionAndPutIntoArray(reference,database):
    docs,array=reference.get(),[]
    for doc in docs:
        array.append(doc.id)
    return array

collectionDS ={
    barcodeCollection : 0,
    billCollection : {
        billsSoldCollection : 0
        },
    customerCollection : {
        customerPaymentCollection : 0,
        customerUdhaarCollection : 0,
        customerPaidCollection : 0
         },
     speechCollection : {
        speechPriceCollection : {
            speechRecordCollection : {
                speechStockRecordCollection : 0,
                speechPriceRecordCollection : 0
            }
        }
     }
}
#can calculate upper limit/lower limit of the size for a timestamp
#for autogenerated id 21 is fixed
usersCollectionRandomDocArray=ExtractRandomDocIdFromCollectionAndPutIntoArray(db1.collection(u'users'),db1)
a=len(usersCollectionRandomDocArray)

Counter,constantPathSize=0,123
sizes=[]
usersCollectionRandomDocArray2=[]
for id1 in usersCollectionRandomDocArray:
    usersCollectionRandomDocArray2=ExtractRandomDocIdFromCollectionAndPutIntoArray(db1.collection(u'users').document(id1).collection(u'speech_inventory'),db1)
    sizes.append(len(usersCollectionRandomDocArray2))
    for id2 in usersCollectionRandomDocArray2:
        usersCollectionRandomDocArray3=ExtractRandomDocIdFromCollectionAndPutIntoArray(db1.collection(u'users').document(id1).collection(u'speech_inventory').document(id2).collection(u'speechInventoryPrice'),db1)
        sizes.append(len(usersCollectionRandomDocArray3))
        for id3 in usersCollectionRandomDocArray3:
            usersCollectionRandomDocArray4=ExtractRandomDocIdFromCollectionAndPutIntoArray(db1.collection(u'users').document(id1).collection(u'speech_inventory').document(id2).collection(u'speechInventoryPrice').document(id3).collection(u'records'),db1)
            sizes.append(len(usersCollectionRandomDocArray4))
            Counter+=1
            
pathSize=Counter*totalConstantPathSize
total=pathSize+sum([utf8len(size) for size in sizes])+a
    
print(total)
    
        
        
    
    
    


